{"version":3,"file":"static/js/533.98974c78.chunk.js","mappings":"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","sources":["utils/normalizeStr.js","redux/contacts/contacts-selectors.js","components/Contacts/ContactItems.jsx","components/Contacts/NoContactNotice.jsx","components/Contacts/NoFilterContactNotice.jsx","components/ModalWindow.jsx","components/Inputs/ContactNameInput.jsx","components/Inputs/ContactNumberInput.jsx","components/Contacts/EditContactForm.jsx","components/Contacts/ContactList.jsx","components/Contacts/AddContactForm.jsx","components/Contacts/ContactFilter.jsx","components/Contacts/ContactTools.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const normalizeStr = inputString => inputString.trim().toLowerCase();\n","import { createSelector } from '@reduxjs/toolkit';\nimport { normalizeStr } from 'utils/normalizeStr';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(({ name }) =>\n      normalizeStr(name).includes(normalizeStr(filterValue))\n    );\n  }\n);\n","import { DeleteIcon, EditIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContactThunk } from 'redux/contacts/contacts-operations';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { FaEllipsisV } from 'react-icons/fa';\nimport {\n  Avatar,\n  Flex,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  Portal,\n  Text,\n  Tooltip,\n} from '@chakra-ui/react';\n\nexport const ContactItems = ({ handleOpenModal }) => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return filteredContacts.map(contact => {\n    const { id, name, phone } = contact;\n\n    const handleRemove = () => dispatch(removeContactThunk(id));\n\n    const onOpenModal = () => handleOpenModal(id, name, phone);\n\n    return (\n      <Flex\n        key={id}\n        alignItems=\"center\"\n        paddingX=\"1rem\"\n        paddingY=\"0.5rem\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.200\"\n      >\n        <Avatar name={name} mr={3} />\n        <Flex\n          alignItems={{ base: 'start', sm: 'center' }}\n          justifyContent=\"space-between\"\n          direction={{ base: 'column', sm: 'row' }}\n          width=\"100%\"\n          pr={5}\n        >\n          <Text fontWeight=\"bold\">{name}:</Text>\n          <Text>{phone}</Text>\n        </Flex>\n        <Flex>\n          <Tooltip hasArrow label=\"Call\" bg=\"gray.500\">\n            <IconButton\n              aria-label=\"Call\"\n              icon={<PhoneIcon />}\n              as=\"a\"\n              href={`tel:${phone}`}\n              mr={2}\n            />\n          </Tooltip>\n\n          <Menu>\n            <MenuButton\n              as={IconButton}\n              aria-label=\"settings\"\n              icon={<FaEllipsisV />}\n              variant=\"ghost\"\n            />\n            <Portal>\n              <MenuList>\n                <MenuGroup title=\"Settings\">\n                  <MenuItem gap=\"2\" fontSize=\"0.9rem\" onClick={onOpenModal}>\n                    <EditIcon />\n                    Edit\n                  </MenuItem>\n                  <MenuItem gap=\"2\" fontSize=\"0.9rem\" onClick={handleRemove}>\n                    <DeleteIcon />\n                    Delete\n                  </MenuItem>\n                </MenuGroup>\n              </MenuList>\n            </Portal>\n          </Menu>\n        </Flex>\n      </Flex>\n    );\n  });\n};\n","import { Flex, Text } from '@chakra-ui/react';\n\nconst NoContactNotice = () => {\n  return (\n    <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n      <Text fontSize=\"lg\" color=\"gray\">\n        Your contact book is empty. Add your first contact!\n      </Text>\n    </Flex>\n  );\n};\n\nexport default NoContactNotice;\n","import { Flex, Text } from '@chakra-ui/react';\n\nconst NoFilterContactNotice = () => {\n  return (\n    <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n      <Text fontSize=\"lg\" color=\"gray\">\n        No contacts found with that name.\n      </Text>\n    </Flex>\n  );\n};\n\nexport default NoFilterContactNotice;\n","import {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\n\nconst ModalWindow = ({ isOpen, onClose, title, children }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{title}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>{children}</ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ModalWindow;\n","import { Field } from 'formik';\nimport { FaUserAlt } from 'react-icons/fa';\nimport {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\n\nconst ContactNameInput = ({ variant }) => {\n  const validateName = value => {\n    if (!value) {\n      return 'Name is required';\n    }\n  };\n\n  return (\n    <Field name=\"name\" validate={validateName}>\n      {({ field, form }) => (\n        <FormControl isInvalid={form.errors.name && form.touched.name}>\n          <FormLabel>Name</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <Icon as={FaUserAlt} color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"text\"\n              required\n              autoComplete=\"name\"\n              placeholder=\"Full Name\"\n              color=\"black\"\n              variant={variant}\n              _focus={{ color: variant === 'filled' ? 'white' : 'black' }}\n              {...field}\n            />\n          </InputGroup>\n          <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n        </FormControl>\n      )}\n    </Field>\n  );\n};\n\nexport default ContactNameInput;\n","import { PhoneIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Field } from 'formik';\n\nconst ContactNumberInput = ({ variant }) => {\n  const validateNumber = value => {\n    if (!value) {\n      return 'Phone is required';\n    }\n  };\n\n  return (\n    <Field name=\"phone\" validate={validateNumber}>\n      {({ field, form }) => (\n        <FormControl isInvalid={form.errors.phone && form.touched.phone}>\n          <FormLabel>Phone</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <PhoneIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"tel\"\n              required\n              autoComplete=\"\"\n              placeholder=\"123-456-7890\"\n              color=\"black\"\n              variant={variant}\n              _focus={{ color: variant === 'filled' ? 'white' : 'black' }}\n              {...field}\n            />\n          </InputGroup>\n          <FormErrorMessage>{form.errors.phone}</FormErrorMessage>\n        </FormControl>\n      )}\n    </Field>\n  );\n};\n\nexport default ContactNumberInput;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { normalizeStr } from 'utils/normalizeStr';\nimport { editContactThunk } from 'redux/contacts/contacts-operations';\nimport { Form, Formik } from 'formik';\nimport { Button, Flex, Stack, useToast } from '@chakra-ui/react';\nimport ContactNameInput from 'components/Inputs/ContactNameInput';\nimport ContactNumberInput from 'components/Inputs/ContactNumberInput';\n\nexport const EditContactForm = ({ id, initialValues, onClose }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const isContact = value =>\n    contacts.find(\n      contact =>\n        normalizeStr(contact.name) === normalizeStr(value) && contact.id !== id\n    );\n\n  const handleSubmit = ({ name, phone }, actions) => {\n    if (isContact(name)) {\n      toast({\n        title: 'Duplicate Contact',\n        description: `\"${name}\" is already in contacts.`,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n      });\n      actions.setSubmitting(false);\n      return;\n    }\n    dispatch(editContactThunk({ id, name, phone }));\n    actions.setSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <Flex direction=\"column\" paddingY=\"5\" width=\"100%\">\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        {props => (\n          <Stack as={Form} gap={3}>\n            <ContactNameInput variant=\"outline\" />\n            <ContactNumberInput variant=\"outline\" />\n            <Flex justifyContent=\"end\" gap=\"3\" pt=\"5\">\n              <Button\n                colorScheme=\"blue\"\n                isLoading={props.isSubmitting}\n                type=\"submit\"\n              >\n                Save\n              </Button>\n              <Button onClick={onClose}>Cancel</Button>\n            </Flex>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { Box, Flex, useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from 'redux/contacts/contacts-operations';\nimport { ContactItems } from './ContactItems';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/contacts-selectors';\nimport NoContactNotice from './NoContactNotice';\nimport NoFilterContactNotice from './NoFilterContactNotice';\nimport ModalWindow from 'components/ModalWindow';\nimport { EditContactForm } from './EditContactForm';\n\nconst ContactsList = () => {\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const handleOpenModal = (inputId, inputName, inputPhone) => {\n    setId(inputId);\n    setName(inputName);\n    setPhone(inputPhone);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        w=\"100%\"\n        h={{ base: 'calc(100vh - 148px)', lg: '100vh' }}\n        maxW=\"570px\"\n        pt={{ base: '0', lg: '42px' }}\n      >\n        <Box height=\"100%\" overflowY=\"auto\">\n          {contacts.length === 0 ? (\n            <NoContactNotice />\n          ) : filteredContacts.length === 0 ? (\n            <NoFilterContactNotice />\n          ) : (\n            <ContactItems handleOpenModal={handleOpenModal} />\n          )}\n        </Box>\n      </Flex>\n      <ModalWindow isOpen={isOpen} onClose={onClose} title=\"Edit Contact\">\n        <EditContactForm\n          id={id}\n          initialValues={{ name, phone }}\n          onClose={onClose}\n        />\n      </ModalWindow>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { normalizeStr } from 'utils/normalizeStr';\nimport { addContactThunk } from 'redux/contacts/contacts-operations';\nimport { Form, Formik } from 'formik';\nimport { Button, Flex, Stack, useToast } from '@chakra-ui/react';\nimport ContactNameInput from 'components/Inputs/ContactNameInput';\nimport ContactNumberInput from 'components/Inputs/ContactNumberInput';\n\nexport const AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const initialValues = { name: '', phone: '' };\n\n  const isContact = value =>\n    contacts.find(({ name }) => normalizeStr(name) === normalizeStr(value));\n\n  const handleSubmit = ({ name, phone }, actions) => {\n    if (isContact(name)) {\n      toast({\n        title: 'Duplicate Contact',\n        description: `\"${name}\" is already in contacts.`,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n      });\n      actions.setSubmitting(false);\n      return;\n    }\n    dispatch(addContactThunk({ name, phone }));\n    actions.setSubmitting(false);\n    actions.resetForm();\n  };\n\n  return (\n    <Flex direction=\"column\" maxW=\"380px\" paddingY=\"5\" width=\"100%\">\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        {props => (\n          <Stack as={Form} gap={3}>\n            <ContactNameInput variant=\"filled\" />\n            <ContactNumberInput variant=\"filled\" />\n            <Button\n              textColor=\"fff\"\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter-slice';\nimport { selectFilter } from 'redux/contacts/contacts-selectors';\nimport { Field, Form, Formik } from 'formik';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport debounce from 'lodash.debounce';\nimport { useEffect } from 'react';\nimport {\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Stack,\n} from '@chakra-ui/react';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const debouncedSetFilter = debounce(value => {\n    dispatch(setFilter(value));\n  }, 300);\n\n  useEffect(() => {\n    return () => {\n      debouncedSetFilter.cancel();\n    };\n  }, [debouncedSetFilter]);\n\n  return (\n    <Flex direction=\"column\" maxW=\"380px\" width=\"100%\">\n      <Formik initialValues={{ filter }}>\n        {() => (\n          <Stack as={Form}>\n            <Field name=\"filter\">\n              {({ field }) => (\n                <FormControl>\n                  <FormLabel>Filter</FormLabel>\n                  <InputGroup>\n                    <InputLeftElement pointerEvents=\"none\">\n                      <SearchIcon color=\"gray.300\" />\n                    </InputLeftElement>\n                    <Input\n                      type=\"text\"\n                      variant=\"filled\"\n                      placeholder=\"Find contacts by name\"\n                      color=\"black\"\n                      _focus={{ color: 'white' }}\n                      {...field}\n                      onChange={e => {\n                        field.onChange(e);\n                        debouncedSetFilter(e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { AddContactForm } from './AddContactForm';\nimport { ContactFilter } from './ContactFilter';\nimport { Flex, Heading, Text } from '@chakra-ui/react';\n\nconst ContactTools = () => {\n  return (\n    <Flex\n      direction=\"column\"\n      bgGradient=\"linear(-20deg, #2b5876 0%, #4e4376 100%)\"\n      p={14}\n      color=\"#fff\"\n      w=\"100%\"\n      height={{ base: '100%', lg: '100vh' }}\n      justify=\"center\"\n      alignItems=\"center\"\n      shadow=\"md\"\n    >\n      <Heading as=\"h1\" size=\"2xl\" paddingY=\"5\">\n        Contact Keeper\n      </Heading>\n      <Text paddingY=\"5\" textAlign=\"center\" fontSize=\"lg\" maxW=\"380px\">\n        Add your contacts and keep them organized in one place. Get started now!\n      </Text>\n      <AddContactForm />\n      <Text paddingY=\"5\" textAlign=\"center\" fontSize=\"md\" maxW=\"380px\">\n        Too many contacts? Just start typing a name and let the magic happen!\n      </Text>\n      <ContactFilter />\n    </Flex>\n  );\n};\n\nexport default ContactTools;\n","import { Flex } from '@chakra-ui/react';\nimport ContactsList from 'components/Contacts/ContactList';\nimport ContactTools from 'components/Contacts/ContactTools';\n\nconst ContactsPage = () => {\n  return (\n    <Flex flexDir={{ base: 'column', lg: 'row' }} align=\"center\">\n      <ContactTools />\n      <ContactsList />\n    </Flex>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["normalizeStr","inputString","trim","toLowerCase","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","filterValue","_ref","name","includes","ContactItems","handleOpenModal","filteredContacts","useSelector","dispatch","useDispatch","map","contact","id","phone","_jsxs","Flex","alignItems","paddingX","paddingY","borderBottom","borderColor","children","_jsx","Avatar","mr","base","sm","justifyContent","direction","width","pr","Text","fontWeight","Tooltip","hasArrow","label","bg","IconButton","icon","PhoneIcon","as","href","concat","Menu","MenuButton","FaEllipsisV","variant","Portal","MenuList","MenuGroup","title","MenuItem","gap","fontSize","onClick","EditIcon","removeContactThunk","DeleteIcon","height","color","isOpen","onClose","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Field","validate","value","_ref2","field","form","FormControl","isInvalid","errors","touched","FormLabel","InputGroup","InputLeftElement","pointerEvents","Icon","FaUserAlt","Input","_objectSpread","type","required","autoComplete","placeholder","_focus","FormErrorMessage","EditContactForm","initialValues","toast","useToast","Formik","onSubmit","actions","find","description","status","duration","isClosable","position","setSubmitting","editContactThunk","props","Stack","Form","ContactNameInput","ContactNumberInput","pt","Button","colorScheme","isLoading","isSubmitting","_useState","useState","_useState2","_slicedToArray","setId","_useState3","_useState4","setName","_useState5","_useState6","setPhone","_useDisclosure","useDisclosure","onOpen","useEffect","getContactsThunk","_Fragment","w","h","lg","maxW","Box","overflowY","length","NoContactNotice","NoFilterContactNotice","inputId","inputName","inputPhone","ModalWindow","AddContactForm","addContactThunk","resetForm","textColor","ContactFilter","debouncedSetFilter","debounce","setFilter","cancel","SearchIcon","onChange","e","target","bgGradient","p","justify","shadow","Heading","size","textAlign","flexDir","align","ContactTools","ContactsList"],"sourceRoot":""}