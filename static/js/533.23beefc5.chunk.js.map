{"version":3,"file":"static/js/533.23beefc5.chunk.js","mappings":"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","sources":["utils/normalizeStr.js","redux/contacts/contacts-selectors.js","components/Contacts/ContactItems.jsx","components/Contacts/NoContactNotice.jsx","components/Contacts/NoFilterContactNotice.jsx","components/ModalWindow.jsx","components/Inputs/ContactNameInput.jsx","components/Inputs/ContactNumberInput.jsx","components/Contacts/EditContactForm.jsx","components/Contacts/ContactList.jsx","components/Contacts/AddContactForm.jsx","components/Contacts/ContactFilter.jsx","components/Contacts/ContactTools.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const normalizeStr = inputString => inputString.trim().toLowerCase();\n","import { createSelector } from '@reduxjs/toolkit';\nimport { normalizeStr } from 'utils/normalizeStr';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(({ name }) =>\n      normalizeStr(name).includes(normalizeStr(filterValue))\n    );\n  }\n);\n","import { DeleteIcon, EditIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContactThunk } from 'redux/contacts/contacts-operations';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { FaEllipsisV } from 'react-icons/fa';\nimport {\n  Avatar,\n  Flex,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  Portal,\n  Text,\n  Tooltip,\n} from '@chakra-ui/react';\n\nexport const ContactItems = ({ handleOpenModal }) => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return filteredContacts.map(contact => {\n    const { id, name, number } = contact;\n\n    const handleRemove = () => dispatch(removeContactThunk(id));\n\n    const onOpenModal = () => handleOpenModal(id, name, number);\n\n    return (\n      <Flex\n        key={id}\n        alignItems=\"center\"\n        paddingX=\"1rem\"\n        paddingY=\"0.5rem\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.200\"\n      >\n        <Avatar name={name} mr={3} />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          width=\"100%\"\n          pr={5}\n        >\n          <Text fontWeight=\"bold\">{name}:</Text>\n          <Text>{number}</Text>\n        </Flex>\n        <Flex>\n          <Tooltip hasArrow label=\"Call\" bg=\"gray.500\">\n            <IconButton\n              aria-label=\"Call\"\n              icon={<PhoneIcon />}\n              as=\"a\"\n              href={`tel:${number}`}\n              mr={2}\n            />\n          </Tooltip>\n\n          <Menu>\n            <MenuButton\n              as={IconButton}\n              aria-label=\"settings\"\n              icon={<FaEllipsisV />}\n              variant=\"ghost\"\n            />\n            <Portal>\n              <MenuList>\n                <MenuGroup title=\"Settings\">\n                  <MenuItem gap=\"2\" fontSize=\"0.9rem\" onClick={onOpenModal}>\n                    <EditIcon />\n                    Edit\n                  </MenuItem>\n                  <MenuItem gap=\"2\" fontSize=\"0.9rem\" onClick={handleRemove}>\n                    <DeleteIcon />\n                    Delete\n                  </MenuItem>\n                </MenuGroup>\n              </MenuList>\n            </Portal>\n          </Menu>\n        </Flex>\n      </Flex>\n    );\n  });\n};\n","import { Flex, Text } from '@chakra-ui/react';\n\nconst NoContactNotice = () => {\n  return (\n    <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n      <Text fontSize=\"lg\" color=\"gray\">\n        Your contact book is empty. Add your first contact!\n      </Text>\n    </Flex>\n  );\n};\n\nexport default NoContactNotice;\n","import { Flex, Text } from '@chakra-ui/react';\n\nconst NoFilterContactNotice = () => {\n  return (\n    <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n      <Text fontSize=\"lg\" color=\"gray\">\n        No contacts found with that name.\n      </Text>\n    </Flex>\n  );\n};\n\nexport default NoFilterContactNotice;\n","import {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\n\nconst ModalWindow = ({ isOpen, onClose, title, children }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{title}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>{children}</ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ModalWindow;\n","import { Field } from 'formik';\nimport { FaUserAlt } from 'react-icons/fa';\nimport {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\n\nconst ContactNameInput = ({ variant }) => {\n  const validateName = value => {\n    if (!value) {\n      return 'Name is required';\n    }\n  };\n\n  return (\n    <Field name=\"name\" validate={validateName}>\n      {({ field, form }) => (\n        <FormControl isInvalid={form.errors.name && form.touched.name}>\n          <FormLabel>Name</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <Icon as={FaUserAlt} color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"text\"\n              required\n              autoComplete=\"name\"\n              placeholder=\"Full Name\"\n              color=\"black\"\n              variant={variant}\n              _focus={{ color: variant === 'filled' ? 'white' : 'black' }}\n              {...field}\n            />\n          </InputGroup>\n          <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n        </FormControl>\n      )}\n    </Field>\n  );\n};\n\nexport default ContactNameInput;\n","import { PhoneIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Field } from 'formik';\n\nconst ContactNumberInput = ({ variant }) => {\n  const validateNumber = value => {\n    if (!value) {\n      return 'Number is required';\n    }\n  };\n\n  return (\n    <Field name=\"number\" validate={validateNumber}>\n      {({ field, form }) => (\n        <FormControl isInvalid={form.errors.number && form.touched.number}>\n          <FormLabel>Number</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <PhoneIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"tel\"\n              required\n              autoComplete=\"\"\n              placeholder=\"123-456-7890\"\n              color=\"black\"\n              variant={variant}\n              _focus={{ color: variant === 'filled' ? 'white' : 'black' }}\n              {...field}\n            />\n          </InputGroup>\n          <FormErrorMessage>{form.errors.number}</FormErrorMessage>\n        </FormControl>\n      )}\n    </Field>\n  );\n};\n\nexport default ContactNumberInput;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { normalizeStr } from 'utils/normalizeStr';\nimport { editContactThunk } from 'redux/contacts/contacts-operations';\nimport { Form, Formik } from 'formik';\nimport { Button, Flex, Stack, useToast } from '@chakra-ui/react';\nimport ContactNameInput from 'components/Inputs/ContactNameInput';\nimport ContactNumberInput from 'components/Inputs/ContactNumberInput';\n\nexport const EditContactForm = ({ id, initialValues, onClose }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const isContact = value =>\n    contacts.find(\n      contact =>\n        normalizeStr(contact.name) === normalizeStr(value) && contact.id !== id\n    );\n\n  const handleSubmit = ({ name, number }, actions) => {\n    if (isContact(name)) {\n      toast({\n        title: 'Duplicate Contact',\n        description: `\"${name}\" is already in contacts.`,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n      });\n      actions.setSubmitting(false);\n      return;\n    }\n    dispatch(editContactThunk({ id, name, number }));\n    actions.setSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <Flex direction=\"column\" paddingY=\"5\" width=\"100%\">\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        {props => (\n          <Stack as={Form} gap={3}>\n            <ContactNameInput variant=\"outline\" />\n            <ContactNumberInput variant=\"outline\" />\n            <Flex justifyContent=\"end\" gap=\"3\" pt=\"5\">\n              <Button\n                colorScheme=\"blue\"\n                isLoading={props.isSubmitting}\n                type=\"submit\"\n              >\n                Save\n              </Button>\n              <Button onClick={onClose}>Cancel</Button>\n            </Flex>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { Box, Flex, useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from 'redux/contacts/contacts-operations';\nimport { ContactItems } from './ContactItems';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/contacts-selectors';\nimport NoContactNotice from './NoContactNotice';\nimport NoFilterContactNotice from './NoFilterContactNotice';\nimport ModalWindow from 'components/ModalWindow';\nimport { EditContactForm } from './EditContactForm';\n\nconst ContactsList = () => {\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const handleOpenModal = (inputId, inputName, inputNumber) => {\n    setId(inputId);\n    setName(inputName);\n    setNumber(inputNumber);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Flex direction=\"column\" width=\"100%\">\n        <Box h=\"calc(100vh - 42px)\" overflowY=\"auto\">\n          {contacts.length === 0 ? (\n            <NoContactNotice />\n          ) : filteredContacts.length === 0 ? (\n            <NoFilterContactNotice />\n          ) : (\n            <ContactItems handleOpenModal={handleOpenModal} />\n          )}\n        </Box>\n      </Flex>\n      <ModalWindow isOpen={isOpen} onClose={onClose} title=\"Edit Contact\">\n        <EditContactForm\n          id={id}\n          initialValues={{ name, number }}\n          onClose={onClose}\n        />\n      </ModalWindow>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { normalizeStr } from 'utils/normalizeStr';\nimport { addContactThunk } from 'redux/contacts/contacts-operations';\nimport { Form, Formik } from 'formik';\nimport { Button, Flex, Stack, useToast } from '@chakra-ui/react';\nimport ContactNameInput from 'components/Inputs/ContactNameInput';\nimport ContactNumberInput from 'components/Inputs/ContactNumberInput';\n\nexport const AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const initialValues = { name: '', number: '' };\n\n  const isContact = value =>\n    contacts.find(({ name }) => normalizeStr(name) === normalizeStr(value));\n\n  const handleSubmit = ({ name, number }, actions) => {\n    if (isContact(name)) {\n      toast({\n        title: 'Duplicate Contact',\n        description: `\"${name}\" is already in contacts.`,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n      });\n      actions.setSubmitting(false);\n      return;\n    }\n    dispatch(addContactThunk({ name, number }));\n    actions.setSubmitting(false);\n    actions.resetForm();\n  };\n\n  return (\n    <Flex direction=\"column\" paddingX=\"14\" paddingY=\"5\" width=\"100%\">\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        {props => (\n          <Stack as={Form} gap={3}>\n            <ContactNameInput variant=\"filled\" />\n            <ContactNumberInput variant=\"filled\" />\n            <Button\n              textColor=\"fff\"\n              colorScheme=\"blue\"\n              isLoading={props.isSubmitting}\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter-slice';\nimport { selectFilter } from 'redux/contacts/contacts-selectors';\nimport { Field, Form, Formik } from 'formik';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport debounce from 'lodash.debounce';\nimport { useEffect } from 'react';\nimport {\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Stack,\n} from '@chakra-ui/react';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const debouncedSetFilter = debounce(value => {\n    dispatch(setFilter(value));\n  }, 300);\n\n  useEffect(() => {\n    return () => {\n      debouncedSetFilter.cancel();\n    };\n  }, [debouncedSetFilter]);\n\n  return (\n    <Flex direction=\"column\" paddingX=\"14\" width=\"100%\">\n      <Formik initialValues={{ filter }}>\n        {() => (\n          <Stack as={Form}>\n            <Field name=\"filter\">\n              {({ field }) => (\n                <FormControl>\n                  <FormLabel>Filter</FormLabel>\n                  <InputGroup>\n                    <InputLeftElement pointerEvents=\"none\">\n                      <SearchIcon color=\"gray.300\" />\n                    </InputLeftElement>\n                    <Input\n                      type=\"text\"\n                      variant=\"filled\"\n                      placeholder=\"Find contacts by name\"\n                      color=\"black\"\n                      _focus={{ color: 'white' }}\n                      {...field}\n                      onChange={e => {\n                        field.onChange(e);\n                        debouncedSetFilter(e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Field>\n          </Stack>\n        )}\n      </Formik>\n    </Flex>\n  );\n};\n","import { AddContactForm } from './AddContactForm';\nimport { ContactFilter } from './ContactFilter';\nimport { Flex, Heading, Text } from '@chakra-ui/react';\n\nconst ContactTools = () => {\n  return (\n    <Flex\n      direction=\"column\"\n      bgGradient=\"linear(-20deg, #2b5876 0%, #4e4376 100%)\"\n      p={14}\n      color=\"#fff\"\n      minH=\"calc(100vh - 42px)\"\n      w=\"100%\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Heading as=\"h1\" size=\"2xl\" paddingY=\"5\">\n        Contact Keeper\n      </Heading>\n      <Text paddingX=\"14\" paddingY=\"5\" textAlign=\"center\" fontSize=\"lg\">\n        Add your contacts and keep them organized in one place. Get started now!\n      </Text>\n      <AddContactForm />\n      <Text paddingX=\"14\" paddingY=\"5\" textAlign=\"center\" fontSize=\"md\">\n        Too many contacts? Just start typing a name and let the magic happen!\n      </Text>\n      <ContactFilter />\n    </Flex>\n  );\n};\n\nexport default ContactTools;\n","import { Flex } from '@chakra-ui/react';\nimport ContactsList from 'components/Contacts/ContactList';\nimport ContactTools from 'components/Contacts/ContactTools';\n\nconst ContactsPage = () => {\n  return (\n    <Flex>\n      <ContactTools />\n      <ContactsList />\n    </Flex>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["normalizeStr","inputString","trim","toLowerCase","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","filterValue","_ref","name","includes","ContactItems","handleOpenModal","filteredContacts","useSelector","dispatch","useDispatch","map","contact","id","number","_jsxs","Flex","alignItems","paddingX","paddingY","borderBottom","borderColor","children","_jsx","Avatar","mr","justifyContent","width","pr","Text","fontWeight","Tooltip","hasArrow","label","bg","IconButton","icon","PhoneIcon","as","href","concat","Menu","MenuButton","FaEllipsisV","variant","Portal","MenuList","MenuGroup","title","MenuItem","gap","fontSize","onClick","EditIcon","removeContactThunk","DeleteIcon","height","color","isOpen","onClose","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Field","validate","value","_ref2","field","form","FormControl","isInvalid","errors","touched","FormLabel","InputGroup","InputLeftElement","pointerEvents","Icon","FaUserAlt","Input","_objectSpread","type","required","autoComplete","placeholder","_focus","FormErrorMessage","EditContactForm","initialValues","toast","useToast","direction","Formik","onSubmit","actions","find","description","status","duration","isClosable","position","setSubmitting","editContactThunk","props","Stack","Form","ContactNameInput","ContactNumberInput","pt","Button","colorScheme","isLoading","isSubmitting","_useState","useState","_useState2","_slicedToArray","setId","_useState3","_useState4","setName","_useState5","_useState6","setNumber","_useDisclosure","useDisclosure","onOpen","useEffect","getContactsThunk","_Fragment","Box","h","overflowY","length","NoContactNotice","NoFilterContactNotice","inputId","inputName","inputNumber","ModalWindow","AddContactForm","addContactThunk","resetForm","textColor","ContactFilter","debouncedSetFilter","debounce","setFilter","cancel","SearchIcon","onChange","e","target","bgGradient","p","minH","w","justify","Heading","size","textAlign","ContactTools","ContactsList"],"sourceRoot":""}